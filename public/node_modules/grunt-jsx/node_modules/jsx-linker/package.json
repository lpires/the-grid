{
  "name": "jsx-linker",
  "version": "0.1.7",
  "description": "JSX postprocessor to support various environment",
  "scripts": {
    "prepublish": "grunt build;grunt doc",
    "build": "grunt build",
    "test": "grunt test",
    "doc": "grunt doc"
  },
  "bin": {
    "jsx-linker": "./bin/jsx-linker"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "keywords": [
    "jsx",
    "app"
  ],
  "homepage": "https://github.com/shibukawa/jsx-linker",
  "bugs": {
    "url": "https://github.com/shibukawa/jsx-linker/issues"
  },
  "directories": {
    "doc": "./doc",
    "lib": "./lib"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/shibukawa/jsx-linker.git"
  },
  "devDependencies": {
    "grunt-contrib-watch": "~0.5.3",
    "grunt": "~0.4.1",
    "grunt-jsx": "0.1.4",
    "esprima.jsx": "~0.1.3",
    "getopt.jsx": "~0.1.0",
    "hogan.jsx": "~0.1.0",
    "grunt-exec": "~0.4.2",
    "requirejs": "~2.1.9",
    "amdefine": "~0.1.0"
  },
  "author": {
    "name": "shibukawa"
  },
  "license": "MIT",
  "dependencies": {
    "esprima": "~1.0.4"
  },
  "readme": "jsx-linker\n===========================================\n\nSynopsis\n---------------\n\nJSX postprocessor to support various environments.\n\nMotivation\n---------------\n\nJavaScript is an infrastructure language for many environments (like SQL, Lua, Visual Basic etc...).\nEach environment uses a different code structure and assumptions because JavaScript doesn't have a standard module system or entry points.\n\nThis program converts the resulting code of JSX into the environment specific code.\n\nSupported Output\n----------------------\n\nYou can select the output format with `-t` option. This tool supports the following output formats:\n\n### commonjs-lib, amd-lib, export-global\n\nAdd `exports` or `define` statements. `export-global` exports classes to global namespace. The classes that have an `__export__` qualifier are exported.\n\n#### Your Library\n\n```js\n__export__ class Fib {\n    static function calc(value : int) : int {\n        // some code;\n    }\n}\n```\n\n#### Client Code\n\n```js\nvar Fib = require('fib').Fib;\nFib.calc(value);\n```\n\n### extjs-app (experimental)\n\nIt supports `config` parameter, entry point function (`main`), and callback funcion for updating (`onUpdate`):\n\n```js\nclass _Main\n{\n    static const config = {\n        name: 'sencha-touch-app',\n        icon: {\n            '57': 'resources/icons/Icon.png',\n            '72': 'resources/icons/Icon~ipad.png',\n            '114': 'resources/icons/Icon@2x.png',\n            '144': 'resources/icons/Icon~ipad@2x.png'\n        },\n        isIconPrecomposed: true,\n        startupImage: {\n            '320x460': 'resources/startup/320x460.jpg',\n            '640x920': 'resources/startup/640x920.png',\n            '768x1004': 'resources/startup/768x1004.png',\n            '748x1024': 'resources/startup/748x1024.png',\n            '1536x2008': 'resources/startup/1536x2008.png',\n            '1496x2048': 'resources/startup/1496x2048.png'\n        },\n        requires: [\n            'Ext.MessageBox'\n        ],\n        views: [] : string[]\n    };\n\n    static function main (argv : string[]) : void\n    {\n        // Destroy the #appLoadingIndicator element\n        Ext.fly('appLoadingIndicator').destroy();\n        // Initialize the main view\n        var view = new MainView();\n        Ext.Viewport.add(view as Ext.Component);\n    }\n\n    static function onUpdate () : void\n    {\n        Ext.Msg.confirm(\n            \"Application Update\",\n            \"This application has just successfully been updated to the latest version. Reload now?\",\n            (buttonId, value, opt) -> {\n                if (buttonId == 'yes') {\n                    dom.window.location.reload();\n                }\n            }\n        );\n    }\n}\n```\n\n### WebWorker\n\n```js\nimport \"js/web.jsx\";\nimport \"webworker.jsx\";\n\nclass _Main\n{\n    static function main(argv : string[]) : void\n    {\n        // called when this worker is initialized\n    }\n\n    __export static function onmessage(event : MessageEvent) : void\n    {\n        // called when `postMessage` is called from main script\n        self.postMessage(\"message\");\n    }\n}\n```\n\n### ngCore\n\n```js\nimport \"ngcore.jsx\";\n\nclass _Main\n{\n    static var game : Game;\n    static var hud : DebugControl;\n\n    static function main (argv : string[]) : void\n    {\n        var glView = new UI.GLView();\n        glView.setOpenGLESVersion(UI.Commands.OpenGLESVersion.OpenGLES2);\n\n        var w = Core.Capabilities.getScreenWidth();\n        var h = Core.Capabilities.getScreenHeight();\n\n        glView.onload = function() {\n            _Main.hud = new DebugControl(glView);\n            Core.UpdateEmitter.setTickRate(1/60);\n            _Main.game = new Game();\n            _Main.game.start();\n        };\n\n        glView.setAttribute('frame', [0, 0, w, h]);\n        glView.setAttribute('active', true);\n    }\n}\n```\n\nInstallation\n---------------\n\n```sh\n$ npm install -g jsx-linker\n```\n\nUsage\n---------------\n\n```sh\n$ jsx-linker [option] [inputjsfile]\n```\n\n### option\n\n*   `-t templateName`, `--tempalte=templateName`\n\n    Select template name. You can see all possible template names on the help description.\n\n*   `-s`, `--stdin`\n\n    Read source code from standard input.\n\n*   `-o`, `--output`\n\n    Output file name. If this option is not specified, it dumps resulting code to standard output.\n\n*   `-h`, `--help``\n\n    Display help\n\nUsage Sample\n-------------------\n\n### Direct conversion with JSX\n\n```sh\n$ jsx --minify sample-class.jsx | jsx-linker -s -t nodejs-lib > sample-nodelib.js\n```\n\n### Convert from file\n\n```sh\n$ jsx-linker -s -t nodejs-lib -o sample-nodelib.js sample.js\n```\n\n### Show Help\n\n```sh\n$ jsx-linker --help\n```\n\nDevelopment\n-------------\n\n## Repository\n\n* Repository: git://github.com/shibukawa/jsx-linker.git\n* Issues: https://github.com/shibukawa/jsx-linker/issues\n\n## Run Test\n\n```sh\n$ grunt test\n```\n\n## Build\n\n```sh\n# Build application or library for JS project\n$ grunt build\n\n# Generate API reference\n$ grunt doc\n\n```\n\nAuthor\n---------\n\n* shibukawa / yoshiki@shibu.jp\n\nLicense\n------------\n\nMIT\n\nComplete license is written in `LICENSE.md`.\n",
  "readmeFilename": "README.md",
  "_id": "jsx-linker@0.1.7",
  "_from": "jsx-linker@~0.1.x"
}
